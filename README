CSE331 Lab Project 3 Dynamic Branch Predictors
----------------------------------------------------------------------

Instructions:

1) Make the predictor (run make in your working source directory).

2) Run the predictor
(bunzip2 -c -k traces/DIST-INT-1.bz2 |./predictor)
where DIST-INT-1.bz is one of the trace files.
./predictor reads (in a binary format) from STDIN a trace
(decompressed with bzip2 on the fly). It outputs to STDOUT basic
statistics about how well the predictor did.

4) Create your own predictor.C file and predictor.h file (or modify
the existing ones).  Be sure to read the comment at the beginning
of the provided predictor.h and follow it's directions.  Just make
sure your predictor implements the three functions exactly as their
specification reads (init_predictor, make_prediction, and
train_predictor).  The only two files of yours you will turn in are
predictor.h and predictor.C (renaming the files after the testing 
is done to predictorg.c and predictorg.h for gshare or predictor21264.c 
and predictor21264.hfor Alpha21264 for submission). All other source 
files (and makefile) will remain the same.

5) Submit your two executable and four source files along with your
report (details of this specified in project description).  Upload the
tar ball in Moodle.


------ Modified by Dhrubo -----

To execute the code you need to do the following first :

1. make

now the code is ready to work.

to check the gshare output you need to execute the following command :

bunzip2 -c -k traces/DIST-INT-1.bz2 |./predictor       (notice that the command given in the readme is difference from me as the directory structure is different from the project.)

To check the alpha predictor output you need to execute the following command :

bunzip2 -c -k traces/DIST-INT-1.bz2 |./predictor21264


Gshare :

Gshare almost similar like the bimodal predictor which uses the history of the branches in the shift register. After that, it XOR the branch or pc instruction and the shift register to get the outcome of that index.
If the prediction is matched with the output the this is taken otherwise not take. And also we are increasing state depending on the matching and also the left shifting the global register to store the recent prediction.

Alpha :

for the alpha, we need local history table, local prediction table, global history register, global prediction table and the chooser prediction table. First of all the we take the last 10 bits from the pc address and 
then decide in which table we should look on. To check the local prediction table, we use the local history table as the index of the local prediction table and find out the value. 
For the global prediction we use the global history register as the index of the global prediction table. We have to train the global prediction, local prediction and also the chooser prediction.


From our result, we found that depending on the file nature both two predictor varies. For some of the cases gshare is showing low prediction but other cases alpha is showing less prediction rate.